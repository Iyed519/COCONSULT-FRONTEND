/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addAsset } from '../fn/finance-and-accounting-process-rest-controller/add-asset';
import { AddAsset$Params } from '../fn/finance-and-accounting-process-rest-controller/add-asset';
import { addBalanceSheet } from '../fn/finance-and-accounting-process-rest-controller/add-balance-sheet';
import { AddBalanceSheet$Params } from '../fn/finance-and-accounting-process-rest-controller/add-balance-sheet';
import { addCashFlows } from '../fn/finance-and-accounting-process-rest-controller/add-cash-flows';
import { AddCashFlows$Params } from '../fn/finance-and-accounting-process-rest-controller/add-cash-flows';
import { addCashFlowStatement } from '../fn/finance-and-accounting-process-rest-controller/add-cash-flow-statement';
import { AddCashFlowStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/add-cash-flow-statement';
import { addExpense } from '../fn/finance-and-accounting-process-rest-controller/add-expense';
import { AddExpense$Params } from '../fn/finance-and-accounting-process-rest-controller/add-expense';
import { addIncomeStatement } from '../fn/finance-and-accounting-process-rest-controller/add-income-statement';
import { AddIncomeStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/add-income-statement';
import { addLiability } from '../fn/finance-and-accounting-process-rest-controller/add-liability';
import { AddLiability$Params } from '../fn/finance-and-accounting-process-rest-controller/add-liability';
import { addRevenue } from '../fn/finance-and-accounting-process-rest-controller/add-revenue';
import { AddRevenue$Params } from '../fn/finance-and-accounting-process-rest-controller/add-revenue';
import { Asset } from '../models/asset';
import { BalanceSheet } from '../models/balance-sheet';
import { CashFlows } from '../models/cash-flows';
import { CashFlowStatement } from '../models/cash-flow-statement';
import { deleteAllAssets } from '../fn/finance-and-accounting-process-rest-controller/delete-all-assets';
import { DeleteAllAssets$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-assets';
import { deleteAllBalanceSheets } from '../fn/finance-and-accounting-process-rest-controller/delete-all-balance-sheets';
import { DeleteAllBalanceSheets$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-balance-sheets';
import { deleteAllCashFlows } from '../fn/finance-and-accounting-process-rest-controller/delete-all-cash-flows';
import { DeleteAllCashFlows$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-cash-flows';
import { deleteAllCashFlowStatement } from '../fn/finance-and-accounting-process-rest-controller/delete-all-cash-flow-statement';
import { DeleteAllCashFlowStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-cash-flow-statement';
import { deleteAllExpenses } from '../fn/finance-and-accounting-process-rest-controller/delete-all-expenses';
import { DeleteAllExpenses$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-expenses';
import { deleteAllIncomeStatement } from '../fn/finance-and-accounting-process-rest-controller/delete-all-income-statement';
import { DeleteAllIncomeStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-income-statement';
import { deleteAllLiabilities } from '../fn/finance-and-accounting-process-rest-controller/delete-all-liabilities';
import { DeleteAllLiabilities$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-liabilities';
import { deleteAllRevenues } from '../fn/finance-and-accounting-process-rest-controller/delete-all-revenues';
import { DeleteAllRevenues$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-all-revenues';
import { deleteAssetById } from '../fn/finance-and-accounting-process-rest-controller/delete-asset-by-id';
import { DeleteAssetById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-asset-by-id';
import { deleteBalanceSheetById } from '../fn/finance-and-accounting-process-rest-controller/delete-balance-sheet-by-id';
import { DeleteBalanceSheetById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-balance-sheet-by-id';
import { deleteCashFlowsById } from '../fn/finance-and-accounting-process-rest-controller/delete-cash-flows-by-id';
import { DeleteCashFlowsById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-cash-flows-by-id';
import { deleteCashFlowStatementById } from '../fn/finance-and-accounting-process-rest-controller/delete-cash-flow-statement-by-id';
import { DeleteCashFlowStatementById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-cash-flow-statement-by-id';
import { deleteExpenseById } from '../fn/finance-and-accounting-process-rest-controller/delete-expense-by-id';
import { DeleteExpenseById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-expense-by-id';
import { deleteIncomeStatementById } from '../fn/finance-and-accounting-process-rest-controller/delete-income-statement-by-id';
import { DeleteIncomeStatementById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-income-statement-by-id';
import { deleteLiabilityById } from '../fn/finance-and-accounting-process-rest-controller/delete-liability-by-id';
import { DeleteLiabilityById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-liability-by-id';
import { deleteRevenueById } from '../fn/finance-and-accounting-process-rest-controller/delete-revenue-by-id';
import { DeleteRevenueById$Params } from '../fn/finance-and-accounting-process-rest-controller/delete-revenue-by-id';
import { Expense } from '../models/expense';
import { findAllAssets } from '../fn/finance-and-accounting-process-rest-controller/find-all-assets';
import { FindAllAssets$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-assets';
import { findAllBalanceSheets } from '../fn/finance-and-accounting-process-rest-controller/find-all-balance-sheets';
import { FindAllBalanceSheets$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-balance-sheets';
import { findAllCashFlows } from '../fn/finance-and-accounting-process-rest-controller/find-all-cash-flows';
import { FindAllCashFlows$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-cash-flows';
import { findAllCashFlowStatements } from '../fn/finance-and-accounting-process-rest-controller/find-all-cash-flow-statements';
import { FindAllCashFlowStatements$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-cash-flow-statements';
import { findAllExpenses } from '../fn/finance-and-accounting-process-rest-controller/find-all-expenses';
import { FindAllExpenses$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-expenses';
import { findAllIncomeStatements } from '../fn/finance-and-accounting-process-rest-controller/find-all-income-statements';
import { FindAllIncomeStatements$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-income-statements';
import { findAllLiabilities } from '../fn/finance-and-accounting-process-rest-controller/find-all-liabilities';
import { FindAllLiabilities$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-liabilities';
import { findAllRevenues } from '../fn/finance-and-accounting-process-rest-controller/find-all-revenues';
import { FindAllRevenues$Params } from '../fn/finance-and-accounting-process-rest-controller/find-all-revenues';
import { findByIdAsset } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-asset';
import { FindByIdAsset$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-asset';
import { findByIdBalanceSheet } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-balance-sheet';
import { FindByIdBalanceSheet$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-balance-sheet';
import { findByIdCashFlows } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-cash-flows';
import { FindByIdCashFlows$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-cash-flows';
import { findByIdCashFlowStatement } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-cash-flow-statement';
import { FindByIdCashFlowStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-cash-flow-statement';
import { findByIdExpense } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-expense';
import { FindByIdExpense$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-expense';
import { findByIdIncomeStatement } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-income-statement';
import { FindByIdIncomeStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-income-statement';
import { findByIdLiability } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-liability';
import { FindByIdLiability$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-liability';
import { findByIdRevenue } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-revenue';
import { FindByIdRevenue$Params } from '../fn/finance-and-accounting-process-rest-controller/find-by-id-revenue';
import { IncomeStatement } from '../models/income-statement';
import { Liability } from '../models/liability';
import { Revenue } from '../models/revenue';
import { updateAsset } from '../fn/finance-and-accounting-process-rest-controller/update-asset';
import { UpdateAsset$Params } from '../fn/finance-and-accounting-process-rest-controller/update-asset';
import { updateBalanceSheet } from '../fn/finance-and-accounting-process-rest-controller/update-balance-sheet';
import { UpdateBalanceSheet$Params } from '../fn/finance-and-accounting-process-rest-controller/update-balance-sheet';
import { updateCashFlows } from '../fn/finance-and-accounting-process-rest-controller/update-cash-flows';
import { UpdateCashFlows$Params } from '../fn/finance-and-accounting-process-rest-controller/update-cash-flows';
import { updateCashFlowStatement } from '../fn/finance-and-accounting-process-rest-controller/update-cash-flow-statement';
import { UpdateCashFlowStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/update-cash-flow-statement';
import { updateExpense } from '../fn/finance-and-accounting-process-rest-controller/update-expense';
import { UpdateExpense$Params } from '../fn/finance-and-accounting-process-rest-controller/update-expense';
import { updateIncomeStatement } from '../fn/finance-and-accounting-process-rest-controller/update-income-statement';
import { UpdateIncomeStatement$Params } from '../fn/finance-and-accounting-process-rest-controller/update-income-statement';
import { updateLiability } from '../fn/finance-and-accounting-process-rest-controller/update-liability';
import { UpdateLiability$Params } from '../fn/finance-and-accounting-process-rest-controller/update-liability';
import { updateRevenue } from '../fn/finance-and-accounting-process-rest-controller/update-revenue';
import { UpdateRevenue$Params } from '../fn/finance-and-accounting-process-rest-controller/update-revenue';

@Injectable({ providedIn: 'root' })
export class FinanceAndAccountingProcessRestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateRevenue()` */
  static readonly UpdateRevenuePath = '/api/finance/updateRevenue';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRevenue()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRevenue$Response(params: UpdateRevenue$Params, context?: HttpContext): Observable<StrictHttpResponse<Revenue>> {
    return updateRevenue(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRevenue$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateRevenue(params: UpdateRevenue$Params, context?: HttpContext): Observable<Revenue> {
    return this.updateRevenue$Response(params, context).pipe(
      map((r: StrictHttpResponse<Revenue>): Revenue => r.body)
    );
  }

  /** Path part for operation `updateLiability()` */
  static readonly UpdateLiabilityPath = '/api/finance/updateLiability/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateLiability()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateLiability$Response(params: UpdateLiability$Params, context?: HttpContext): Observable<StrictHttpResponse<Liability>> {
    return updateLiability(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateLiability$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateLiability(params: UpdateLiability$Params, context?: HttpContext): Observable<Liability> {
    return this.updateLiability$Response(params, context).pipe(
      map((r: StrictHttpResponse<Liability>): Liability => r.body)
    );
  }

  /** Path part for operation `updateIncomeStatement()` */
  static readonly UpdateIncomeStatementPath = '/api/finance/updateIncomeStatement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateIncomeStatement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateIncomeStatement$Response(params: UpdateIncomeStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeStatement>> {
    return updateIncomeStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateIncomeStatement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateIncomeStatement(params: UpdateIncomeStatement$Params, context?: HttpContext): Observable<IncomeStatement> {
    return this.updateIncomeStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeStatement>): IncomeStatement => r.body)
    );
  }

  /** Path part for operation `updateExpense()` */
  static readonly UpdateExpensePath = '/api/finance/updateExpense';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateExpense()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateExpense$Response(params: UpdateExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<Expense>> {
    return updateExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateExpense$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateExpense(params: UpdateExpense$Params, context?: HttpContext): Observable<Expense> {
    return this.updateExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<Expense>): Expense => r.body)
    );
  }

  /** Path part for operation `updateCashFlows()` */
  static readonly UpdateCashFlowsPath = '/api/finance/updateCashFlows';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCashFlows()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCashFlows$Response(params: UpdateCashFlows$Params, context?: HttpContext): Observable<StrictHttpResponse<CashFlows>> {
    return updateCashFlows(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCashFlows$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCashFlows(params: UpdateCashFlows$Params, context?: HttpContext): Observable<CashFlows> {
    return this.updateCashFlows$Response(params, context).pipe(
      map((r: StrictHttpResponse<CashFlows>): CashFlows => r.body)
    );
  }

  /** Path part for operation `updateCashFlowStatement()` */
  static readonly UpdateCashFlowStatementPath = '/api/finance/updateCashFlowStatement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCashFlowStatement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCashFlowStatement$Response(params: UpdateCashFlowStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<CashFlowStatement>> {
    return updateCashFlowStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCashFlowStatement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCashFlowStatement(params: UpdateCashFlowStatement$Params, context?: HttpContext): Observable<CashFlowStatement> {
    return this.updateCashFlowStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<CashFlowStatement>): CashFlowStatement => r.body)
    );
  }

  /** Path part for operation `updateBalanceSheet()` */
  static readonly UpdateBalanceSheetPath = '/api/finance/updateBalanceSheet';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBalanceSheet()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBalanceSheet$Response(params: UpdateBalanceSheet$Params, context?: HttpContext): Observable<StrictHttpResponse<BalanceSheet>> {
    return updateBalanceSheet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBalanceSheet$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBalanceSheet(params: UpdateBalanceSheet$Params, context?: HttpContext): Observable<BalanceSheet> {
    return this.updateBalanceSheet$Response(params, context).pipe(
      map((r: StrictHttpResponse<BalanceSheet>): BalanceSheet => r.body)
    );
  }

  /** Path part for operation `updateAsset()` */
  static readonly UpdateAssetPath = '/api/finance/updateAsset';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAsset()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAsset$Response(params: UpdateAsset$Params, context?: HttpContext): Observable<StrictHttpResponse<Asset>> {
    return updateAsset(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAsset$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAsset(params: UpdateAsset$Params, context?: HttpContext): Observable<Asset> {
    return this.updateAsset$Response(params, context).pipe(
      map((r: StrictHttpResponse<Asset>): Asset => r.body)
    );
  }

  /** Path part for operation `addRevenue()` */
  static readonly AddRevenuePath = '/api/finance/addRevenue';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addRevenue()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRevenue$Response(params: AddRevenue$Params, context?: HttpContext): Observable<StrictHttpResponse<Revenue>> {
    return addRevenue(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addRevenue$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addRevenue(params: AddRevenue$Params, context?: HttpContext): Observable<Revenue> {
    return this.addRevenue$Response(params, context).pipe(
      map((r: StrictHttpResponse<Revenue>): Revenue => r.body)
    );
  }

  /** Path part for operation `addLiability()` */
  static readonly AddLiabilityPath = '/api/finance/addLiability';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addLiability()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addLiability$Response(params: AddLiability$Params, context?: HttpContext): Observable<StrictHttpResponse<Liability>> {
    return addLiability(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addLiability$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addLiability(params: AddLiability$Params, context?: HttpContext): Observable<Liability> {
    return this.addLiability$Response(params, context).pipe(
      map((r: StrictHttpResponse<Liability>): Liability => r.body)
    );
  }

  /** Path part for operation `addIncomeStatement()` */
  static readonly AddIncomeStatementPath = '/api/finance/addIncomeStatement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addIncomeStatement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addIncomeStatement$Response(params: AddIncomeStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeStatement>> {
    return addIncomeStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addIncomeStatement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addIncomeStatement(params: AddIncomeStatement$Params, context?: HttpContext): Observable<IncomeStatement> {
    return this.addIncomeStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeStatement>): IncomeStatement => r.body)
    );
  }

  /** Path part for operation `addExpense()` */
  static readonly AddExpensePath = '/api/finance/addExpense';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addExpense()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addExpense$Response(params: AddExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<Expense>> {
    return addExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addExpense$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addExpense(params: AddExpense$Params, context?: HttpContext): Observable<Expense> {
    return this.addExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<Expense>): Expense => r.body)
    );
  }

  /** Path part for operation `addCashFlows()` */
  static readonly AddCashFlowsPath = '/api/finance/addCashFlows';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCashFlows()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCashFlows$Response(params: AddCashFlows$Params, context?: HttpContext): Observable<StrictHttpResponse<CashFlows>> {
    return addCashFlows(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCashFlows$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCashFlows(params: AddCashFlows$Params, context?: HttpContext): Observable<CashFlows> {
    return this.addCashFlows$Response(params, context).pipe(
      map((r: StrictHttpResponse<CashFlows>): CashFlows => r.body)
    );
  }

  /** Path part for operation `addCashFlowStatement()` */
  static readonly AddCashFlowStatementPath = '/api/finance/addCashFlowStatement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCashFlowStatement()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCashFlowStatement$Response(params: AddCashFlowStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<CashFlowStatement>> {
    return addCashFlowStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCashFlowStatement$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCashFlowStatement(params: AddCashFlowStatement$Params, context?: HttpContext): Observable<CashFlowStatement> {
    return this.addCashFlowStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<CashFlowStatement>): CashFlowStatement => r.body)
    );
  }

  /** Path part for operation `addBalanceSheet()` */
  static readonly AddBalanceSheetPath = '/api/finance/addBalancesheet';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBalanceSheet()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBalanceSheet$Response(params: AddBalanceSheet$Params, context?: HttpContext): Observable<StrictHttpResponse<BalanceSheet>> {
    return addBalanceSheet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBalanceSheet$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBalanceSheet(params: AddBalanceSheet$Params, context?: HttpContext): Observable<BalanceSheet> {
    return this.addBalanceSheet$Response(params, context).pipe(
      map((r: StrictHttpResponse<BalanceSheet>): BalanceSheet => r.body)
    );
  }

  /** Path part for operation `addAsset()` */
  static readonly AddAssetPath = '/api/finance/addAsset';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addAsset()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAsset$Response(params: AddAsset$Params, context?: HttpContext): Observable<StrictHttpResponse<Asset>> {
    return addAsset(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addAsset$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addAsset(params: AddAsset$Params, context?: HttpContext): Observable<Asset> {
    return this.addAsset$Response(params, context).pipe(
      map((r: StrictHttpResponse<Asset>): Asset => r.body)
    );
  }

  /** Path part for operation `findByIdRevenue()` */
  static readonly FindByIdRevenuePath = '/api/finance/findRevenueById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdRevenue()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdRevenue$Response(params: FindByIdRevenue$Params, context?: HttpContext): Observable<StrictHttpResponse<Revenue>> {
    return findByIdRevenue(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdRevenue$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdRevenue(params: FindByIdRevenue$Params, context?: HttpContext): Observable<Revenue> {
    return this.findByIdRevenue$Response(params, context).pipe(
      map((r: StrictHttpResponse<Revenue>): Revenue => r.body)
    );
  }

  /** Path part for operation `findByIdLiability()` */
  static readonly FindByIdLiabilityPath = '/api/finance/findLiabilityById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdLiability()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdLiability$Response(params: FindByIdLiability$Params, context?: HttpContext): Observable<StrictHttpResponse<Liability>> {
    return findByIdLiability(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdLiability$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdLiability(params: FindByIdLiability$Params, context?: HttpContext): Observable<Liability> {
    return this.findByIdLiability$Response(params, context).pipe(
      map((r: StrictHttpResponse<Liability>): Liability => r.body)
    );
  }

  /** Path part for operation `findByIdIncomeStatement()` */
  static readonly FindByIdIncomeStatementPath = '/api/finance/findIncomeStatementById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdIncomeStatement()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdIncomeStatement$Response(params: FindByIdIncomeStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeStatement>> {
    return findByIdIncomeStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdIncomeStatement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdIncomeStatement(params: FindByIdIncomeStatement$Params, context?: HttpContext): Observable<IncomeStatement> {
    return this.findByIdIncomeStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeStatement>): IncomeStatement => r.body)
    );
  }

  /** Path part for operation `findByIdExpense()` */
  static readonly FindByIdExpensePath = '/api/finance/findExpenseById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdExpense()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdExpense$Response(params: FindByIdExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<Expense>> {
    return findByIdExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdExpense$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdExpense(params: FindByIdExpense$Params, context?: HttpContext): Observable<Expense> {
    return this.findByIdExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<Expense>): Expense => r.body)
    );
  }

  /** Path part for operation `findByIdCashFlows()` */
  static readonly FindByIdCashFlowsPath = '/api/finance/findCashFlowsById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdCashFlows()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdCashFlows$Response(params: FindByIdCashFlows$Params, context?: HttpContext): Observable<StrictHttpResponse<CashFlows>> {
    return findByIdCashFlows(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdCashFlows$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdCashFlows(params: FindByIdCashFlows$Params, context?: HttpContext): Observable<CashFlows> {
    return this.findByIdCashFlows$Response(params, context).pipe(
      map((r: StrictHttpResponse<CashFlows>): CashFlows => r.body)
    );
  }

  /** Path part for operation `findByIdCashFlowStatement()` */
  static readonly FindByIdCashFlowStatementPath = '/api/finance/findCashFlowStatementById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdCashFlowStatement()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdCashFlowStatement$Response(params: FindByIdCashFlowStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<CashFlowStatement>> {
    return findByIdCashFlowStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdCashFlowStatement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdCashFlowStatement(params: FindByIdCashFlowStatement$Params, context?: HttpContext): Observable<CashFlowStatement> {
    return this.findByIdCashFlowStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<CashFlowStatement>): CashFlowStatement => r.body)
    );
  }

  /** Path part for operation `findByIdBalanceSheet()` */
  static readonly FindByIdBalanceSheetPath = '/api/finance/findBalanceSheetById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdBalanceSheet()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdBalanceSheet$Response(params: FindByIdBalanceSheet$Params, context?: HttpContext): Observable<StrictHttpResponse<BalanceSheet>> {
    return findByIdBalanceSheet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdBalanceSheet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdBalanceSheet(params: FindByIdBalanceSheet$Params, context?: HttpContext): Observable<BalanceSheet> {
    return this.findByIdBalanceSheet$Response(params, context).pipe(
      map((r: StrictHttpResponse<BalanceSheet>): BalanceSheet => r.body)
    );
  }

  /** Path part for operation `findByIdAsset()` */
  static readonly FindByIdAssetPath = '/api/finance/findAssetById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findByIdAsset()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdAsset$Response(params: FindByIdAsset$Params, context?: HttpContext): Observable<StrictHttpResponse<Asset>> {
    return findByIdAsset(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findByIdAsset$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findByIdAsset(params: FindByIdAsset$Params, context?: HttpContext): Observable<Asset> {
    return this.findByIdAsset$Response(params, context).pipe(
      map((r: StrictHttpResponse<Asset>): Asset => r.body)
    );
  }

  /** Path part for operation `findAllRevenues()` */
  static readonly FindAllRevenuesPath = '/api/finance/findAllRevenues';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllRevenues()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllRevenues$Response(params?: FindAllRevenues$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Revenue>>> {
    return findAllRevenues(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllRevenues$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllRevenues(params?: FindAllRevenues$Params, context?: HttpContext): Observable<Array<Revenue>> {
    return this.findAllRevenues$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Revenue>>): Array<Revenue> => r.body)
    );
  }

  /** Path part for operation `findAllLiabilities()` */
  static readonly FindAllLiabilitiesPath = '/api/finance/findAllLiabilities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllLiabilities()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllLiabilities$Response(params?: FindAllLiabilities$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Liability>>> {
    return findAllLiabilities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllLiabilities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllLiabilities(params?: FindAllLiabilities$Params, context?: HttpContext): Observable<Array<Liability>> {
    return this.findAllLiabilities$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Liability>>): Array<Liability> => r.body)
    );
  }

  /** Path part for operation `findAllIncomeStatements()` */
  static readonly FindAllIncomeStatementsPath = '/api/finance/findAllIncomeStatements';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllIncomeStatements()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllIncomeStatements$Response(params?: FindAllIncomeStatements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeStatement>>> {
    return findAllIncomeStatements(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllIncomeStatements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllIncomeStatements(params?: FindAllIncomeStatements$Params, context?: HttpContext): Observable<Array<IncomeStatement>> {
    return this.findAllIncomeStatements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeStatement>>): Array<IncomeStatement> => r.body)
    );
  }

  /** Path part for operation `findAllExpenses()` */
  static readonly FindAllExpensesPath = '/api/finance/findAllExpenses';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllExpenses()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllExpenses$Response(params?: FindAllExpenses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Expense>>> {
    return findAllExpenses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllExpenses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllExpenses(params?: FindAllExpenses$Params, context?: HttpContext): Observable<Array<Expense>> {
    return this.findAllExpenses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Expense>>): Array<Expense> => r.body)
    );
  }

  /** Path part for operation `findAllCashFlows()` */
  static readonly FindAllCashFlowsPath = '/api/finance/findAllCashFlows';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCashFlows()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCashFlows$Response(params?: FindAllCashFlows$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CashFlows>>> {
    return findAllCashFlows(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCashFlows$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCashFlows(params?: FindAllCashFlows$Params, context?: HttpContext): Observable<Array<CashFlows>> {
    return this.findAllCashFlows$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CashFlows>>): Array<CashFlows> => r.body)
    );
  }

  /** Path part for operation `findAllCashFlowStatements()` */
  static readonly FindAllCashFlowStatementsPath = '/api/finance/findAllCashFlowStatements';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllCashFlowStatements()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCashFlowStatements$Response(params?: FindAllCashFlowStatements$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CashFlowStatement>>> {
    return findAllCashFlowStatements(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllCashFlowStatements$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllCashFlowStatements(params?: FindAllCashFlowStatements$Params, context?: HttpContext): Observable<Array<CashFlowStatement>> {
    return this.findAllCashFlowStatements$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CashFlowStatement>>): Array<CashFlowStatement> => r.body)
    );
  }

  /** Path part for operation `findAllBalanceSheets()` */
  static readonly FindAllBalanceSheetsPath = '/api/finance/findAllBalanceSheets';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBalanceSheets()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBalanceSheets$Response(params?: FindAllBalanceSheets$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<BalanceSheet>>> {
    return findAllBalanceSheets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBalanceSheets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBalanceSheets(params?: FindAllBalanceSheets$Params, context?: HttpContext): Observable<Array<BalanceSheet>> {
    return this.findAllBalanceSheets$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<BalanceSheet>>): Array<BalanceSheet> => r.body)
    );
  }

  /** Path part for operation `findAllAssets()` */
  static readonly FindAllAssetsPath = '/api/finance/findAllAssets';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllAssets()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAssets$Response(params?: FindAllAssets$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Asset>>> {
    return findAllAssets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllAssets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllAssets(params?: FindAllAssets$Params, context?: HttpContext): Observable<Array<Asset>> {
    return this.findAllAssets$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Asset>>): Array<Asset> => r.body)
    );
  }

  /** Path part for operation `deleteRevenueById()` */
  static readonly DeleteRevenueByIdPath = '/api/finance/deleteRevenueById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRevenueById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRevenueById$Response(params: DeleteRevenueById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteRevenueById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRevenueById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRevenueById(params: DeleteRevenueById$Params, context?: HttpContext): Observable<void> {
    return this.deleteRevenueById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteLiabilityById()` */
  static readonly DeleteLiabilityByIdPath = '/api/finance/deleteLiabilityById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteLiabilityById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteLiabilityById$Response(params: DeleteLiabilityById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteLiabilityById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteLiabilityById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteLiabilityById(params: DeleteLiabilityById$Params, context?: HttpContext): Observable<void> {
    return this.deleteLiabilityById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteIncomeStatementById()` */
  static readonly DeleteIncomeStatementByIdPath = '/api/finance/deleteIncomeStatementById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteIncomeStatementById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteIncomeStatementById$Response(params: DeleteIncomeStatementById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteIncomeStatementById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteIncomeStatementById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteIncomeStatementById(params: DeleteIncomeStatementById$Params, context?: HttpContext): Observable<void> {
    return this.deleteIncomeStatementById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteExpenseById()` */
  static readonly DeleteExpenseByIdPath = '/api/finance/deleteExpenseById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteExpenseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteExpenseById$Response(params: DeleteExpenseById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteExpenseById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteExpenseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteExpenseById(params: DeleteExpenseById$Params, context?: HttpContext): Observable<void> {
    return this.deleteExpenseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCashFlowsById()` */
  static readonly DeleteCashFlowsByIdPath = '/api/finance/deleteCashFlowsById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCashFlowsById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCashFlowsById$Response(params: DeleteCashFlowsById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCashFlowsById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCashFlowsById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCashFlowsById(params: DeleteCashFlowsById$Params, context?: HttpContext): Observable<void> {
    return this.deleteCashFlowsById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteCashFlowStatementById()` */
  static readonly DeleteCashFlowStatementByIdPath = '/api/finance/deleteCashFlowStatementById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCashFlowStatementById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCashFlowStatementById$Response(params: DeleteCashFlowStatementById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCashFlowStatementById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCashFlowStatementById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCashFlowStatementById(params: DeleteCashFlowStatementById$Params, context?: HttpContext): Observable<void> {
    return this.deleteCashFlowStatementById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteBalanceSheetById()` */
  static readonly DeleteBalanceSheetByIdPath = '/api/finance/deleteBalanceSheetById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBalanceSheetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBalanceSheetById$Response(params: DeleteBalanceSheetById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteBalanceSheetById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBalanceSheetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBalanceSheetById(params: DeleteBalanceSheetById$Params, context?: HttpContext): Observable<void> {
    return this.deleteBalanceSheetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAssetById()` */
  static readonly DeleteAssetByIdPath = '/api/finance/deleteAssetById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAssetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAssetById$Response(params: DeleteAssetById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAssetById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAssetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAssetById(params: DeleteAssetById$Params, context?: HttpContext): Observable<void> {
    return this.deleteAssetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllRevenues()` */
  static readonly DeleteAllRevenuesPath = '/api/finance/deleteAllRevenue';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllRevenues()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllRevenues$Response(params?: DeleteAllRevenues$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllRevenues(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllRevenues$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllRevenues(params?: DeleteAllRevenues$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllRevenues$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllLiabilities()` */
  static readonly DeleteAllLiabilitiesPath = '/api/finance/deleteAllLiabilities';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllLiabilities()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllLiabilities$Response(params?: DeleteAllLiabilities$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllLiabilities(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllLiabilities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllLiabilities(params?: DeleteAllLiabilities$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllLiabilities$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllIncomeStatement()` */
  static readonly DeleteAllIncomeStatementPath = '/api/finance/deleteAllIncomeStatement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllIncomeStatement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllIncomeStatement$Response(params?: DeleteAllIncomeStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllIncomeStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllIncomeStatement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllIncomeStatement(params?: DeleteAllIncomeStatement$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllIncomeStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllExpenses()` */
  static readonly DeleteAllExpensesPath = '/api/finance/deleteAllExpense';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllExpenses()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllExpenses$Response(params?: DeleteAllExpenses$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllExpenses(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllExpenses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllExpenses(params?: DeleteAllExpenses$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllExpenses$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllCashFlows()` */
  static readonly DeleteAllCashFlowsPath = '/api/finance/deleteAllCashFlows';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllCashFlows()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllCashFlows$Response(params?: DeleteAllCashFlows$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllCashFlows(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllCashFlows$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllCashFlows(params?: DeleteAllCashFlows$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllCashFlows$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllCashFlowStatement()` */
  static readonly DeleteAllCashFlowStatementPath = '/api/finance/deleteAllCashFlowStatement';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllCashFlowStatement()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllCashFlowStatement$Response(params?: DeleteAllCashFlowStatement$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllCashFlowStatement(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllCashFlowStatement$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllCashFlowStatement(params?: DeleteAllCashFlowStatement$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllCashFlowStatement$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllBalanceSheets()` */
  static readonly DeleteAllBalanceSheetsPath = '/api/finance/deleteAllBalanceSheet';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllBalanceSheets()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllBalanceSheets$Response(params?: DeleteAllBalanceSheets$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllBalanceSheets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllBalanceSheets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllBalanceSheets(params?: DeleteAllBalanceSheets$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllBalanceSheets$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAllAssets()` */
  static readonly DeleteAllAssetsPath = '/api/finance/deleteAllAsset';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllAssets()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllAssets$Response(params?: DeleteAllAssets$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAllAssets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllAssets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllAssets(params?: DeleteAllAssets$Params, context?: HttpContext): Observable<void> {
    return this.deleteAllAssets$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
