/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addQuestion } from '../fn/question/add-question';
import { AddQuestion$Params } from '../fn/question/add-question';
import { deleteQuestion } from '../fn/question/delete-question';
import { DeleteQuestion$Params } from '../fn/question/delete-question';
import { findQuestion } from '../fn/question/find-question';
import { FindQuestion$Params } from '../fn/question/find-question';
import { getAllQuestions } from '../fn/question/get-all-questions';
import { GetAllQuestions$Params } from '../fn/question/get-all-questions';
import { Question } from '../models/question';
import { updateQuestion } from '../fn/question/update-question';
import { UpdateQuestion$Params } from '../fn/question/update-question';

@Injectable({ providedIn: 'root' })
export class QuestionService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateQuestion()` */
  static readonly UpdateQuestionPath = '/Question/updateQuestion';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateQuestion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuestion$Response(params: UpdateQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateQuestion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuestion(params: UpdateQuestion$Params, context?: HttpContext): Observable<void> {
    return this.updateQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteQuestion()` */
  static readonly DeleteQuestionPath = '/Question/deleteQuestion';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteQuestion()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuestion$Response(params: DeleteQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteQuestion$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuestion(params: DeleteQuestion$Params, context?: HttpContext): Observable<void> {
    return this.deleteQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addQuestion()` */
  static readonly AddQuestionPath = '/Question/addQuestion';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addQuestion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addQuestion$Response(params: AddQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return addQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addQuestion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addQuestion(params: AddQuestion$Params, context?: HttpContext): Observable<void> {
    return this.addQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllQuestions()` */
  static readonly GetAllQuestionsPath = '/Question/getAllQuestions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllQuestions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllQuestions$Response(params?: GetAllQuestions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Question>>> {
    return getAllQuestions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllQuestions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllQuestions(params?: GetAllQuestions$Params, context?: HttpContext): Observable<Array<Question>> {
    return this.getAllQuestions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Question>>): Array<Question> => r.body)
    );
  }

  /** Path part for operation `findQuestion()` */
  static readonly FindQuestionPath = '/Question/findQuestionById';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findQuestion()` instead.
   *
   * This method doesn't expect any request body.
   */
  findQuestion$Response(params: FindQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return findQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findQuestion$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findQuestion(params: FindQuestion$Params, context?: HttpContext): Observable<Question> {
    return this.findQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

}
