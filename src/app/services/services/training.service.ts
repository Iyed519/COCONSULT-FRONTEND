/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllDisplayableTrainings } from '../fn/training/find-all-displayable-trainings';
import { FindAllDisplayableTrainings$Params } from '../fn/training/find-all-displayable-trainings';
import { findAllTrainings } from '../fn/training/find-all-trainings';
import { FindAllTrainings$Params } from '../fn/training/find-all-trainings';
import { findAllTrainingsByTrainee } from '../fn/training/find-all-trainings-by-trainee';
import { FindAllTrainingsByTrainee$Params } from '../fn/training/find-all-trainings-by-trainee';
import { findTrainingById } from '../fn/training/find-training-by-id';
import { FindTrainingById$Params } from '../fn/training/find-training-by-id';
import { PageResponseTrainingResponse } from '../models/page-response-training-response';
import { saveTraining } from '../fn/training/save-training';
import { SaveTraining$Params } from '../fn/training/save-training';
import { Training } from '../models/training';
import { TrainingResponse } from '../models/training-response';
import { updateTraining } from '../fn/training/update-training';
import { UpdateTraining$Params } from '../fn/training/update-training';
import { updateTrainingStatus } from '../fn/training/update-training-status';
import { UpdateTrainingStatus$Params } from '../fn/training/update-training-status';
import { uploadTrainingCover } from '../fn/training/upload-training-cover';
import { UploadTrainingCover$Params } from '../fn/training/upload-training-cover';

@Injectable({ providedIn: 'root' })
export class TrainingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllTrainings()` */
  static readonly FindAllTrainingsPath = '/Trainings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTrainings()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTrainings$Response(params?: FindAllTrainings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTrainingResponse>> {
    return findAllTrainings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTrainings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTrainings(params?: FindAllTrainings$Params, context?: HttpContext): Observable<PageResponseTrainingResponse> {
    return this.findAllTrainings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTrainingResponse>): PageResponseTrainingResponse => r.body)
    );
  }

  /** Path part for operation `saveTraining()` */
  static readonly SaveTrainingPath = '/Trainings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveTraining()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTraining$Response(params: SaveTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveTraining$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveTraining(params: SaveTraining$Params, context?: HttpContext): Observable<number> {
    return this.saveTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadTrainingCover()` */
  static readonly UploadTrainingCoverPath = '/Trainings/cover/{training-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadTrainingCover()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadTrainingCover$Response(params: UploadTrainingCover$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadTrainingCover(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadTrainingCover$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadTrainingCover(params: UploadTrainingCover$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadTrainingCover$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateTrainingStatus()` */
  static readonly UpdateTrainingStatusPath = '/Trainings/updateTrainingStatus/{training-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTrainingStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTrainingStatus$Response(params: UpdateTrainingStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateTrainingStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTrainingStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTrainingStatus(params: UpdateTrainingStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateTrainingStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateTraining()` */
  static readonly UpdateTrainingPath = '/Trainings/updateTraining/{training-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTraining()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTraining$Response(params: UpdateTraining$Params, context?: HttpContext): Observable<StrictHttpResponse<Training>> {
    return updateTraining(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTraining$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTraining(params: UpdateTraining$Params, context?: HttpContext): Observable<Training> {
    return this.updateTraining$Response(params, context).pipe(
      map((r: StrictHttpResponse<Training>): Training => r.body)
    );
  }

  /** Path part for operation `findTrainingById()` */
  static readonly FindTrainingByIdPath = '/Trainings/{training-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTrainingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTrainingById$Response(params: FindTrainingById$Params, context?: HttpContext): Observable<StrictHttpResponse<TrainingResponse>> {
    return findTrainingById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTrainingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTrainingById(params: FindTrainingById$Params, context?: HttpContext): Observable<TrainingResponse> {
    return this.findTrainingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TrainingResponse>): TrainingResponse => r.body)
    );
  }

  /** Path part for operation `findAllTrainingsByTrainee()` */
  static readonly FindAllTrainingsByTraineePath = '/Trainings/findAllTrainingsByTrainee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTrainingsByTrainee()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTrainingsByTrainee$Response(params?: FindAllTrainingsByTrainee$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTrainingResponse>> {
    return findAllTrainingsByTrainee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTrainingsByTrainee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTrainingsByTrainee(params?: FindAllTrainingsByTrainee$Params, context?: HttpContext): Observable<PageResponseTrainingResponse> {
    return this.findAllTrainingsByTrainee$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTrainingResponse>): PageResponseTrainingResponse => r.body)
    );
  }

  /** Path part for operation `findAllDisplayableTrainings()` */
  static readonly FindAllDisplayableTrainingsPath = '/Trainings/findAllDisplayableTrainings';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllDisplayableTrainings()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDisplayableTrainings$Response(params?: FindAllDisplayableTrainings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseTrainingResponse>> {
    return findAllDisplayableTrainings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllDisplayableTrainings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllDisplayableTrainings(params?: FindAllDisplayableTrainings$Params, context?: HttpContext): Observable<PageResponseTrainingResponse> {
    return this.findAllDisplayableTrainings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseTrainingResponse>): PageResponseTrainingResponse => r.body)
    );
  }

}
